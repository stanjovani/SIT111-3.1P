
### Section 1: Summary

In this project, I constructed and programmed a Simon Game using an Arduino microcontroller, which involved setting up a circuit with LEDs, buttons, and a speaker, and writing the code to control the game logic. Through this task, I learned to effectively manage both the hardware assembly and the software programming aspects of an embedded system.

Key learnings include:
- **Circuit Design**: I understood how to connect multiple components like LEDs, buttons, and a speaker to an Arduino board. Each LED and button needed precise wiring to ensure the game functioned correctly.
- **Programming**: Writing the code in the Arduino IDE taught me how to handle inputs from the buttons, control outputs to the LEDs and speaker, and manage game state with arrays and loops.
- **Debugging**: Testing and debugging the game helped me improve my problem-solving skills, as I needed to ensure that each part of the game worked as expected.
- **Integration**: Combining the physical circuit with the software was crucial, emphasizing the interdependence of hardware and software in embedded systems.

### Section 2: Reflection

- **Achievement of Learning Goals**: I know I've achieved the learning goals because the game functions as intended. The LEDs light up in sequence, the buttons respond correctly to inputs, and the speaker plays tones based on game events, all of which I was able to program and build myself.
- **Most Important Learning**: The most significant learning for me was understanding the integration of software with physical electronics. Programming the Arduino to respond to real-world inputs and control outputs was enlightening and showed the practical application of code in physical devices.
- **Relation to Prior Knowledge**: This project expanded on my previous knowledge of programming and electronics. While I was familiar with basic coding, applying these skills to control physical hardware like LEDs and buttons was a new and exciting challenge.
- **Future Utility**: The skills learned here will be useful in any future projects involving embedded systems, whether in personal projects, educational settings, or potentially in professional roles that require the integration of software and hardware. This experience has also prepared me for more complex projects involving sensors, user interfaces, or IoT devices.

These sections not only demonstrate your grasp of the project but also reflect on the broader implications and applications of the skills acquired. Make sure to personalize the content further with any specific challenges you faced or insights you gained during the project.

Code

#include "pitches.h"  // Include the pitches header for musical notes

// Define pin numbers for LEDs, buttons and speaker
const uint8_t ledPins[] = {9, 10, 11, 12};
const uint8_t buttonPins[] = {2, 3, 4, 5};
#define SPEAKER_PIN 8

// Pins connected to 74HC595 shift register (used to show game score
const int LATCH_PIN = A1;  // 74HC595 pin 12
const int DATA_PIN = A0;   // 74HC595 pin 14
const int CLOCK_PIN = A2;  // 74HC595 pin 11

#define MAX_GAME_LENGTH 100
const int gameTones[] = {NOTE_G3, NOTE_C4, NOTE_E4, NOTE_G5};

// Global variables to store the game state
uint8_t gameSequence[MAX_GAME_LENGTH] = {0};
uint8_t gameIndex = 0;

void setup() {
  Serial.begin(9600);
  for (byte i = 0; i < 4; i++) {
    pinMode(ledPins[i], OUTPUT);
    pinMode(buttonPins[i], INPUT_PULLUP);
  }
  pinMode(SPEAKER_PIN, OUTPUT);
  pinMode(LATCH_PIN, OUTPUT);
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(DATA_PIN, OUTPUT);
  randomSeed(analogRead(A3));  // Prime the random number generator
// Digit table for the 7-segment display
const uint8_t digitTable[] = {
  0b11000000, 0b11111001, 0b10100100, 0b10110000, 0b10011001, 
  0b10010010, 0b10000010, 0b11111000, 0b10000000, 0b10010000
const uint8_t DASH = 0b10111111;
void sendScore(uint8_t high, uint8_t low) {
  digitalWrite(LATCH_PIN, LOW);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, digitTable[high]);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, digitTable[low]);
  digitalWrite(LATCH_PIN, HIGH);
void displayScore() {
  int high = gameIndex % 100 / 10;
  int low = gameIndex % 10;
  sendScore(high ? digitTable[high] : 0xFF, digitTable[low]);
void lightLedAndPlayTone(byte ledIndex) {
  digitalWrite(ledPins[ledIndex], HIGH);
  tone(SPEAKER_PIN, gameTones[ledIndex], 300);  // Play tone for 300 ms

void playSequence() {
  for (int i = 0; i < gameIndex; i++) {
    lightLedAndPlayTone(gameSequence[i]);
    delay(150);
byte readButtons() {
  while (true) {
    for (byte i = 0; i < 4; i++) {
      if (digitalRead(buttonPins[i]) == LOW) {
        delay(10);  // Debounce delay
        while (digitalRead(buttonPins[i]) == LOW);  // Wait for button release
        return i;
    delay(1);  // Give some rest to the CPU

void gameOver() {
  Serial.print("Game over! Your score: ");
  Serial.println(gameIndex - 1);
  for (int i = 0; i < 4; i++) {
  }
  tone(SPEAKER_PIN, NOTE_A4, 1000);  // Play game over tone for 1 second
  for (int i = 0; i < 4; i++) {
    digitalWrite(ledPins[i], LOW);
  noTone(SPEAKER_PIN);
  sendScore(DASH, DASH);

bool checkUserSequence() {
  for (int i = 0; i < gameIndex; i++) {
    byte actualButton = readButtons();
    lightLedAndPlayTone(actualButton);
    if (gameSequence[i] != actualButton) {
      return false;
  return true;

void playLevelUpSound() {
  tone(SPEAKER_PIN, NOTE_C5, 200);  // Play level up sound for 200 ms}

void loop() {
  displayScore();
  // Add a random color to the end of the sequence
  gameSequence[gameIndex] = random(0, 4);
  gameIndex++;
  if (gameIndex >= MAX_GAME_LENGTH) {
    gameIndex = MAX_GAME_LENGTH - 1;
  playSequence();
  if (!checkUserSequence()) {
    gameOver();
  delay(300);

  if (gameIndex > 0) {
    playLevelUpSound();
    delay(300);
  }
}
